version: 2.1

# commands:
#   here put reusable commands

jobs:
  build:
    working_directory: ~/repo
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            pwd
            ls
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
            chmod +x /bin/hadolint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install

      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

      - setup_remote_docker:
          version: 19.03.13
          docker_layer_caching: false

      - run:
          name: get sudo
          command: apt-get update && apt-get -y install sudo

      - run:
          name: Install Docker via apk
          command: |
            # setup repository
            sudo apt-get update
            
            sudo apt-get -y install apt-transport-https ca-certificates curl gnupg-agent software-properties-common
            
            curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
            
            sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable" -y
            # install docker engine
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io

      - run:
          name: Build docker image
          command: |
            . venv/bin/activate
            docker build -t flaskapp:capstone .

            # List docker images
            docker image ls

            # Run flask app locally (switched off in CICD pipeline)
            # docker run -p 8000:80 flaskapp:capstone
      - run:
          name: Upload docker image
          command: |
            dockerpath="gajdulj/flaskapp"
            # Authenticate & tag
            echo "Docker ID and Image: $dockerpath"
            echo "1 complete"
            docker login -u "gajdulj" -p "$dockerhubpass"
            echo "2 complete"
            docker tag flaskapp:capstone gajdulj/flaskapp:capstone
            echo "3 complete"
            # Push image to a docker repository
            docker push gajdulj/flaskapp:capstone
            echo "end"
  kubernetes-deploy:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "da:95:0f:a4:4a:71:0e:d4:f4:33:89:5b:24:57:76:99"
            # circelci fingerprint assigned to AWS pem key.

      - run:
          name: Install packages
          command: |
            apk add curl tar gzip
            apk add --update sudo
            pip install awscli
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin
      - run:
          name: Check if kubernetes cluster exists, if not, create it.
          command: |
            export AWS_DEFAULT_REGION=eu-west-1
            CLUSTER_EXISTS=$(aws cloudformation list-exports --query "Exports[?Name=='eksctl-flaskapp-cluster::ARN'].Value" --output text)
            echo ${CLUSTER_EXISTS}

            if [ ! -z "${CLUSTER_EXISTS}" ]
              then 
                  echo "Cluster already exists. Proceeding to cluster update."
              else
                  echo "Cluster not found, creating the cluster."
                  eksctl create cluster --name flaskapp \
                        --node-type t2.medium \
                        --nodes 2 \
                        --region eu-west-1
            fi
      - run:
          name: Update config for Kubernetes
          command: |
            sleep 2m
            aws eks --region eu-west-1 update-kubeconfig --name flaskapp
      - run:
          name: Select kubernetes config created in the previous step
          command: |
            export AWS_DEFAULT_REGION=eu-west-1
            RESOURCE_NAME=$(aws cloudformation list-exports --query "Exports[?Name=='eksctl-flaskapp-cluster::ARN'].Value" --output text)
            kubectl config use-context ${RESOURCE_NAME}
      - run:
          name: Deploy kubernetes
          command: |
            kubectl apply -f deploy_kubernetes.yml
            kubectl rollout restart deployments/flaskapp
            sleep 4m
      - run:
          name: Print outputs
          command: |
            kubectl get nodes
            kubectl get deployments
            kubectl get pod -o wide
            kubectl get service/flaskapp
            kubectl describe pods
workflows:
  default:
    jobs:
      - build
      - kubernetes-deploy:
          requires: [build]